#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DeepL API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
from dotenv import load_dotenv
load_dotenv()
from main import translate_with_deepl, translate_contract_params

def test_deepl_translation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('DEEPL_API_KEY')
    if not api_key:
        print("‚ùå DEEPL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: set DEEPL_API_KEY=your-key")
        return False
    
    print("‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥
    test_text = "Hello, this is a test message"
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥: '{test_text}'")
    
    try:
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        ru_result = translate_with_deepl(test_text, 'ru', api_key)
        print(f"üá∑üá∫ –†—É—Å—Å–∫–∏–π: {ru_result}")
        
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        uk_result = translate_with_deepl(test_text, 'uk', api_key)
        print(f"üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π: {uk_result}")
        
        print("\n‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True

def test_contract_translation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    
    api_key = os.getenv('DEEPL_API_KEY')
    if not api_key:
        print("‚ùå DEEPL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        print("\nüá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")
        ru_params = translate_contract_params('ru', api_key)
        
        print(f"  seller_name: {ru_params['seller_name']}")
        print(f"  goods_description: {ru_params['goods_description']}")
        print(f"  price_per_ton_text: {ru_params['price_per_ton_text']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        print("\nüá∫üá¶ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π:")
        uk_params = translate_contract_params('uk', api_key)
        
        print(f"  seller_name: {uk_params['seller_name']}")
        print(f"  goods_description: {uk_params['goods_description']}")
        print(f"  price_per_ton_text: {uk_params['price_per_ton_text']}")
        
        print("\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeepL API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
    if not test_deepl_translation():
        print("\n‚ùå –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
        return
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    if not test_contract_translation():
        print("\n‚ùå –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("DeepL API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

